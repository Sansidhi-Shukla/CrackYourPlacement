/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    /* steps:-
        1. break in 2 parts;
        2. reverse second linked list
        3. compare both lists */
    //for step 1
    ListNode* findMid(ListNode* head){
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast->next != NULL){
            fast = fast->next;
            if(fast->next != NULL){
                fast = fast->next;
                slow = slow->next ;
            }
        }
        return slow;
    }

    //step 2
    ListNode* reverse(ListNode* head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* next = NULL;
        while(curr != NULL){
            next = curr->next;
            curr->next = prev;
            prev= curr;
            curr=next;
        }
        return prev ;
    }
    bool isPalindrome(ListNode* head) {
        ListNode* mid = findMid(head);

        //step 1
        ListNode* neew = mid->next;
        mid->next = NULL ;

        //step 2
        neew = reverse(neew);
        mid = head;

        //step 3
        while(neew != NULL && mid != NULL ){
            if(neew->val != mid->val){
                return false ;
            }
            else{
                neew = neew->next;
                mid = mid->next ;
            }
        }
        return true;
    }
};
