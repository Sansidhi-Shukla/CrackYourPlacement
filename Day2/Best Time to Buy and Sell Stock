class Solution {
public:

    //this below function solves the question using recursion
    void maxProfitFinder(vector<int>& prices, int i, int& minProfit,
                         int& maxProfit) {
        if (i == prices.size()) {
            return;
        }

        if (prices[i] < minProfit) {
            minProfit = prices[i];
        }
        if (prices[i] - minProfit > maxProfit) {
            maxProfit = (int)prices[i] - minProfit;
        }
        maxProfitFinder(prices, i + 1, minProfit, maxProfit);
    }

    int maxProfit(vector<int>& prices) {
        int buyPrice = INT_MAX, profit = INT_MIN;
        //using recursion
        //maxProfitFinder(prices, 0, ans1, ans2);

        for(int i =0 ; i<prices.size();i++){
            if(prices[i]<buyPrice){
                buyPrice = prices[i];
            }
            if(prices[i]-buyPrice > profit){
                profit = prices[i]-buyPrice ;
            }
        }
        return (profit);
    }
};
