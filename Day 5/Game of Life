
class Solution {
public:
    int neigh(vector<vector<int>>& board, int& i, int& j) {
        int count = 0;

        if (i - 1 >= 0 && j - 1 >= 0) {
            count += board[i - 1][j - 1];
        }
        if (i - 1 >= 0) {
            count += board[i - 1][j];
        }
        if (i - 1 >= 0 && j + 1 < board[0].size()) {
            count += board[i - 1][j + 1];
        }
        if (j - 1 >= 0) {
            count += board[i][j - 1];
        }
        if (j + 1 < board[0].size()) {
            count += board[i][j + 1];
        }
        if (i + 1 < board.size() && j - 1 >= 0) {
            count += board[i + 1][j - 1];
        }
        if (i + 1 < board.size()) {
            count += board[i + 1][j];
        }
        if (i + 1 < board.size() && j + 1 < board[0].size()) {
            count += board[i + 1][j + 1];
        }
        return count;
    }

    void gameOfLife(vector<vector<int>>& board) {
        vector<vector<int>> ans;
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[0].size(); j++) {
                int n = neigh(board, i, j);
                if (board[i][j] == 1) {
                    if (n < 2 || n > 3) {
                        ans.push_back({i,j});
                    }
                } 
                else {
                    if (n == 3) {
                        ans.push_back({i,j});
                    }
                }
            }
        }
        for(int i =0 ; i< ans.size() ; i++){
            board[ans[i][0]][ans[i][1]] ^= 1;
        }
    }
};
