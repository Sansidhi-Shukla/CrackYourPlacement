/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int length(ListNode* head) {
        int l = 0;
        ListNode* temp = head;
        while (temp != NULL) {
            temp = temp->next;
            l++;
        }
        return l;
    }
    ListNode* reverse(ListNode* head, int k) {
        if (head == NULL || head->next == NULL) {
            return head;
        }
        ListNode* prev = NULL;

        ListNode* curr = head;
        int pos = 0;
        int len = length(head);
        if(len<k){
            return head;
        }
        while (pos < k && curr != NULL) {
            pos++;
            ListNode* nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;
        }

        if (curr != NULL) {
            head->next = reverse(curr, k);
        } else {
            head->next = NULL;
        }
        return prev;
    }

    ListNode* reverseKGroup(ListNode* head, int k) {

        ListNode* ans = reverse(head, k);
        return ans;
    }
};
